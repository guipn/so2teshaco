<!-- Documentation generated by CDoc ( https://github.com/guipn/CDoc/ ) -->
<html>
<head>
    <title>teshaco Documentation: str.c</title>
    <link rel="stylesheet" type="text/css" href="style.css"></link>
</head>
<body>
    <h1><a href="index.htm">teshaco</a>: str.c</h1>
    
    <hr/>
    <h2>Files included</h2>
    <em>memory.h</em><br/>
    <em>stdarg.h</em><br/>
        <br/>
    <br/>

    <h2>Definitions</h2>
    #define INIT_LINE_SIZE 512<br/>

<br/>
<br/>

    <h2>Function Summary</h2>
        <a href="#free_strings;"><h3>free_strings;</h3></a> <ShortDescription> <br/>
    <a href="#string_buffer_length;"><h3>string_buffer_length;</h3></a> <ShortDescription> <br/>
    <a href="#read_line;"><h3>read_line;</h3></a> <ShortDescription> <br/>
    <a href="#split_on_str;"><h3>split_on_str;</h3></a> <ShortDescription> <br/>
    <a href="#split;"><h3>split;</h3></a> <ShortDescription> <br/>
    <a href="#concat;"><h3>concat;</h3></a> <ShortDescription> <br/>
    <a href="#join;"><h3>join;</h3></a> <ShortDescription> <br/>
    <a href="#parse_PATH;"><h3>parse_PATH;</h3></a> <ShortDescription> <br/>
    <a href="#get_command_tokens;"><h3>get_command_tokens;</h3></a> <ShortDescription> <br/>

    <p/>
    <hr/>
        <h2><a name="free_strings;">void free_strings(char **buffer);</h2>
    Chama free em todos os elementos de buffer, ate encontrar
NULL. Nao chama free em buffer.<ReturnsDescription>
    <p/>
    <br/>
    <br/>
    <h2><a name="string_buffer_length;">size_t string_buffer_length(char **buffer);</h2>
    Conta o numero de ponteiros != NULL no array cujo 
primeiro elemento eh **buffer. O ultimo elemento do array
deve ser NULL (buffer deve apontar para o primeiro elemento de um
string buffer valido).<ReturnsDescription>
    <p/>
    <br/>
    <br/>
    <h2><a name="read_line;">char *read_line(FILE *stream);</h2>
    Responsavel por ler uma linha de texto de stdin. Retorna
o endereco do primeiro caracter da linha lida.
Se, ao tentar ler algum caracter, houver erro, mostra uma
mensagem e aborta a execucao do programa.<ReturnsDescription>
    <p/>
    <br/>
    <br/>
    <h2><a name="split_on_str;">char **split_on_str(char *target, char *separator);</h2>
    Retorna o endereco do endereco do primeiro elemento de uma array
de ponteiros para os primeiros caracteres das strings resultantes da
quebra de target a cada vez que separator eh encontrado (as ocorrencias
nao sao inclusas nos resultados).<ReturnsDescription>
    <p/>
    <br/>
    <br/>
    <h2><a name="split;">char **split(char *line, char *sep);</h2>
    Retorna um ponteiro para o primeiro elemento de uma array
de ponteiros para os primeiros elementos de strings. O ultimo
elemento do array cujo endereco do primeiro elemento eh retornado
tem valor NULL.<ReturnsDescription>
    <p/>
    <br/>
    <br/>
    <h2><a name="concat;">char *concat(unsigned int count, char *first, ...);</h2>
    Concatena as strings cujos primeiros caracteres tem enderecos 
fornecidos pelos argumentos a partir do segundo. O primeiro argumento
deve informar o numero de strings a serem concatenadas. Se o numero
informado for maior que o presente, o comportamento eh indefinido.<ReturnsDescription>
    <p/>
    <br/>
    <br/>
    <h2><a name="join;">char *join(char *strs[], char *glue);</h2>
    Retorna o endereco do primeiro caracter da string resultante da
concatenacao de todas as strings cujos primeiros caracteres tem
seus enderecos contidos em strs. O ultimo elemento de strs deve ser
NULL. A string armazenada em glue eh inserida entre cada 2 strings de
strs.<ReturnsDescription>
    <p/>
    <br/>
    <br/>
    <h2><a name="parse_PATH;">char **parse_PATH(void);</h2>
    Retorna o endere√ßo do primeiro elemento de uma array de 
strings, cada uma representando uma entrada da variavel de
ambiente PATH.<ReturnsDescription>
    <p/>
    <br/>
    <br/>
    <h2><a name="get_command_tokens;">char **get_command_tokens(char *cmd, int *foreground);</h2>
    Dado um unico comando, determina se ele deve ser rodado em background
ou foreground, armazenando o resultado da avaliacao em <em>foreground</em>
e retornando cada 'token' como um elemento de um array cujo ultimo elemento
eh NULL. Exemplo:
int fg;
char **tokens = get_command_tokens("&wget http://www.google.com", &fg);
O exemplo acima retorna { "wget", "http://www.google.com" }, e atribui 1 a fg.<ReturnsDescription>
    <p/>
    <br/>
    <br/>


    <div id="footer"><a href="http://code.google.com/p/teshaco/">teshaco</a>, version 0, by <a href="http://guipn.com">Guilherme P. Nami</a></div>
</body>
</html>
