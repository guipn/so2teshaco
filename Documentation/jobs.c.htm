<!-- Documentation generated by CDoc ( https://github.com/guipn/CDoc/ ) -->
<html>
<head>
    <title>teshaco Documentation: jobs.c</title>
    <link rel="stylesheet" type="text/css" href="style.css"></link>
</head>
<body>
    <h1><a href="index.htm">teshaco</a>: jobs.c</h1>
    
    <hr/>
    <h2>Files included</h2>
    <em>jobs.h</em><br/>
    <em>stdio.h</em><br/>
        <br/>
    <br/>

    
    <h2>Function Summary</h2>
        <a href="#make_job;"><h3>make_job;</h3></a> <ShortDescription> <br/>
    <a href="#make_job_node;"><h3>make_job_node;</h3></a> <ShortDescription> <br/>
    <a href="#get_fg_job;"><h3>get_fg_job;</h3></a> <ShortDescription> <br/>
    <a href="#get_job;"><h3>get_job;</h3></a> <ShortDescription> <br/>
    <a href="#delete_job;"><h3>delete_job;</h3></a> <ShortDescription> <br/>
    <a href="#add_job"><h3>add_job</h3></a> <ShortDescription> <br/>
    <a href="#destroy_job_list;"><h3>destroy_job_list;</h3></a> <ShortDescription> <br/>
    <a href="#print_jobs;"><h3>print_jobs;</h3></a> <ShortDescription> <br/>
    <a href="#update_status;"><h3>update_status;</h3></a> <ShortDescription> <br/>
    <a href="#invoke_bg;"><h3>invoke_bg;</h3></a> <ShortDescription> <br/>
    <a href="#invoke_fg;"><h3>invoke_fg;</h3></a> <ShortDescription> <br/>

    <p/>
    <hr/>
        <h2><a name="make_job;">job_t *make_job(pid_t pid, char *name, enum job_state status, char fg);</h2>
    Cria um job para o shell.
pid eh o pid do novo job sendo registado.
name eh o nome do job.
status eh seu estado (vide jobs.h).
fg deve ser 0, se o job estiver sendo executado em foreground, e != 0 caso contrario.<ReturnsDescription>
    <p/>
    <br/>
    <br/>
    <h2><a name="make_job_node;">job_node_t *make_job_node(job_t *job);</h2>
    Cria, dado um job, um no que pode ser adicionado a uma lista de
nos contendo outros jobs.<ReturnsDescription>
    <p/>
    <br/>
    <br/>
    <h2><a name="get_fg_job;">job_t *get_fg_job(job_node_t *list);</h2>
    Retorna o job que estiver em foreground.<ReturnsDescription>
    <p/>
    <br/>
    <br/>
    <h2><a name="get_job;">job_t *get_job(job_node_t *list, pid_t pid);</h2>
    Retorna o job pertencente aa lista dada cujo pid eh igual
ao pid fornecido.<ReturnsDescription>
    <p/>
    <br/>
    <br/>
    <h2><a name="delete_job;">void delete_job(job_node_t **head, pid_t pid);</h2>
    Remove o no cujo pid eh o fornecido de uma lista 
cujo endereco do primeiro elemento eh dado por head.<ReturnsDescription>
    <p/>
    <br/>
    <br/>
    <h2><a name="add_job">job_node_t *add_job(job_node_t *head, job_t *new);</h2>
    Adiciona um job aa lista que comeca em head.<ReturnsDescription>
    <p/>
    <br/>
    <br/>
    <h2><a name="destroy_job_list;">void destroy_job_list(job_node_t *head);</h2>
    Libera todo o espaco ocupado pela lista de nos (bem como o espaco
utilizado por cada job contido em cada no).<ReturnsDescription>
    <p/>
    <br/>
    <br/>
    <h2><a name="print_jobs;">void print_jobs(job_node_t *head);</h2>
    Imprime todos os nos contidos na lista que comeca em head.<ReturnsDescription>
    <p/>
    <br/>
    <br/>
    <h2><a name="update_status;">void update_status(job_t *job, int status);</h2>
    Atualiza o status de um job, dado o estado fornecido pelo segundo 
argumento, que deve ter sido modificado por wait ou waitpid.<ReturnsDescription>
    <p/>
    <br/>
    <br/>
    <h2><a name="invoke_bg;">void invoke_bg(job_node_t *list, pid_t pid);</h2>
    Ativa um job e o leva para background.<ReturnsDescription>
    <p/>
    <br/>
    <br/>
    <h2><a name="invoke_fg;">void invoke_fg(job_node_t *list, pid_t pid);</h2>
    Ativa um job (que nao tenha terminado) e o traz para foreground.<ReturnsDescription>
    <p/>
    <br/>
    <br/>


    <div id="footer"><a href="http://code.google.com/p/teshaco/">teshaco</a>, version 0, by <a href="http://guipn.com">Guilherme P. Nami</a></div>
</body>
</html>
